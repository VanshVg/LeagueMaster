// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeagueRole {
  admin
  user
}

enum LeagueStatus {
  pending
  league
  knockout
  completed
}

enum MatchStatus {
  pending
  completed
}

model users {
  id                 Int       @id @unique @default(autoincrement())
  username           String
  password           String
  verification_token String
  reset_token        String?
  reset_time         DateTime?
  is_active          Boolean   @default(false)

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user_leagues league_users[] @relation("users_league")
}

model league_types {
  id   Int    @id @default(autoincrement())
  type String

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  leagues leagues[]
}

model leagues {
  id           Int          @id @default(autoincrement())
  name         String
  joining_code String       @unique
  type_id      Int
  status       LeagueStatus @default(pending)

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  league_types   league_types     @relation(fields: [type_id], references: [id])
  league_users   league_users[]   @relation("league_users")
  teams          teams[]          @relation("league_teams")
  league_matches league_matches[] @relation("league_matches")
}

model league_users {
  id          Int        @id @default(autoincrement())
  user_id     Int
  league_id   Int
  role        LeagueRole
  is_archived Boolean    @default(false)

  users   users   @relation("users_league", fields: [user_id], references: [id])
  leagues leagues @relation("league_users", fields: [league_id], references: [id])
}

model teams {
  id             Int    @id @default(autoincrement())
  league_id      Int
  team_name      String
  matches_played Int    @default(0)
  matches_won    Int    @default(0)
  matches_lost   Int    @default(0)
  goals_scored   Int    @default(0)
  goals_conceded Int    @default(0)
  points         Int    @default(0)

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  league              leagues          @relation("league_teams", fields: [league_id], references: [id])
  home_league_matches league_matches[] @relation("home_team")
  away_league_matches league_matches[] @relation("away_team")
}

model match_types {
  id   Int    @id @default(autoincrement())
  type String

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model league_matches {
  id              Int         @id @default(autoincrement())
  league_id       Int
  match_type_id   Int
  match_number    Int
  home_team_id    Int
  away_team_id    Int
  home_team_score Int?
  away_team_score Int?
  extra_time      Boolean?
  penalties       Boolean?
  status          MatchStatus @default(pending)

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  league        leagues               @relation("league_matches", fields: [league_id], references: [id])
  home_team     teams                 @relation("home_team", fields: [home_team_id], references: [id])
  away_team     teams                 @relation("away_team", fields: [away_team_id], references: [id])
  match_penalty match_penalty_scores?
}

model match_penalty_scores {
  id              Int @id @default(autoincrement())
  match_id        Int @unique
  home_team_score Int
  away_team_score Int

  match_penalty league_matches @relation(fields: [match_id], references: [id])
}
